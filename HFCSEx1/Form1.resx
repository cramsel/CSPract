<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAAAAAAAD/2wBDAAkGBxMTEhIQEhMVFhUVGBYVGBUWFhUaGxoWFRUXGBUXFhkY
        HSggGholGxcWITIhJSkrLi4uFx8zODMtNygtLiv/2wBDAQoKCgUFBQ4FBQ4rGRMZKysrKysrKysrKysr
        KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKyv/wAARCACMAWkDASIAAhEBAxEB/8QA
        HAABAAEFAQEAAAAAAAAAAAAAAAYCAwQFBwEI/8QAPxAAAQMCBAMFBgIIBQUAAAAAAQACAwQRBRIhMQYT
        QSJRYXGBBxQyQpGhUrEjMzRyksHR8BUkU4LSQ2Jjc8L/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFBEB
        AAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8A7iiIgIiICIrU9Q1gzOcAO8mw+pQXV451lF8U4zhj
        7MeaV21mDT1J/ldYMfE87x+zFvcS4/8AEIJk6YKz7+38Tf4gue1dDPMSZJna/LfQDwANlQzhtn4nfRB0
        QYg3vb9Qq21YPd9Vz5vDbfxn+/VDhIGznA+BQdGbMFcBXPY6upj+CTOPwv1++/3W2w3ixhIZMDE7vPwn
        16eqCWIrUM4crqAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIi1eO4qIYyRq
        46NHef6IKMdxxlOLfE87MG58fAKJS8yc55iSOjBsPRU0dIS4yyEukdqSf5Lf0dDfU7INdSUQ+VoHkNfq
        s5tCeq2bWADQKoIMBlH1VRpgswhUILBiG1lZkpAVl3VTUGqloisCqow4WcLqSlqsSQAoI3QV76QgEufC
        enVvl/RTihrGvaHNILSLgqNVlILEOGh0IWlwzFDQy8uQnkPOjvwk9fLv+qDpSK1TyhwBH9joVdQEREBE
        RAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQW5pLAlQSqqefM6S5yt0Z3W7/Vbvi+uysEbT
        2pDlH7o+L+Q9Vp6GC1m20CDOoYLkFbgC2is0sVgrl0HrQqrqm69CAqXK61i8LeqCyAvQvSF6AgXQhe2X
        tuiDHmiuD9lHcYw5srHxu67HuPQqUOC1tdF83egj/s3x17Xvw6b4o78snq0fE303HhfuXSQVxziCB0c8
        dTHo+Mh1+8dL9+lx5FdUwavbNEyVuzwHDwvuPQoM9ERAREQEREBERAREQEREBERAREQEREBERAREQERE
        BERAREQFS86FVLExSoEcT5CbBjXO/hBKDn+I1pqK9wHwQ9n6bn1d+S39BH91FuFoey+R273b9+9/uVM6
        BmgPh+aDIv8AZVLxoVQQUhXY2q20LIgCC61ioexZDWq3IgxSF4FWQvQ1BQAqg1VZV4UFDwsaob2SslxV
        qVuiCIY9DcD1C2fAdUWtfAfkOcfuu3A9fzVvFYwWnyutPw/V8uqiJOjyWH1Bt97IOooqWHQKpAREQERE
        BERAREQEREBERAREQEREBERAREQEREBERAREQFpOMv2Oo/8AW5btaXi39mmH/YUEP4e/Ux+v5lS+kb2A
        othLcsbB4BSykd2GoLttFbcr7wrBQeNWVEFYAV5hQX8ytvcqS5ariXF/daWoqiM3Kjc/L3kfCD5myDZF
        XGBcP4fpsaxKmlxJuJOisX8uFpc1rsmpFmmzRfQXDr21V6g4+qarA697pHMqqYwt50ZyOLZJBlcctrO7
        LwbW2QdqcVYe5ct4X9qlOynooqo1Je5oa6pey8ZeD2rvc7M61xcgG1wtlV4s3/HYqb3irzOZcQNy+7Ec
        l5u7t3vpf4dwPNBPMyFQOr9qtEx8jWR1EzIjZ80MYdG3W1y4uGmm9tel1t8T47ooaSOuMmaKXSMNF3PI
        vmAabWIIIN7WQZeJt0PiCoW+UNlgP/kab/7gr8XtBpqh5g5c8MpbdjJ4w0vuCezYnprra655Q8SS1Fby
        iyTIXtZHGGWLCZAA6XW4PeUH1BHsqlF6XjemNDPiFniOndIyRhDeYJI3WLLZrZiS21z8wvZYUeNsfXys
        bLUtecPE4gcGCJoLhZ+hJEwLgD0sdz0CaouM4ZxHVnDuHZTUSF89e2KVxcbyR+8SsyvPzDKANe5TrF+P
        YIZ5adkFVUvgAdMaeIPbECLjOS4a2ubC+xQSxFg4Ji8NXBHUwPzxyC7TtsbEEdCCCCPBcrwsuq6nFnVO
        LVdKIKh7I2x1LY2NYM2uVw2FhsQg7Ei5fwJx88YbDNWc6olfPJBDyo80k+XtAhug0Fxc2+HXqpLQceQS
        NrM8NRDJSRmaSGaNrZOWGl2ZgDi03A7+oQStFBI/anSFkMxhqm08pa33l0NomPd8j3Zr3B0JaCL9TZbX
        HONIaecUrIaipnyc10dNGHlkZ2c8uc0C/de+o7wgkyKI1HtGom0TcRvIYTKIHAM7bJCdQ9pItYanfTa9
        1t+Hsd96Eh93qYMhA/zEeTMHC4czU3H0I6hBt0UUxrjuGCeSljhqamWJueVtNGH8tpFxnLnNFyDsLlKr
        2g0TaWGsa58jZ3ZIo42EyvkGjmBhtqCLG5A8dQglaKM4LxrBUPmhdHNBPCwyOgnYGycsD42gEhzemhWl
        b7XKLlQ1DoqpsEruXz3Qjlsk7XYcQ65Nmk9gO+xsHQEUUwbjyCeeSlMVRDKyIzhs8YYXxD52do+Ghsfo
        bayP2sUZhZVCCr93JDXz8kZInE2DZHB2p1Hw5twN9EE+RRvG+Moad8MLIp6mWZnNZHTRh55X+oS4hob6
        9QsJ/tGpRRz1zmTtFPIIZYXMAlZI5zW2LS63zd/QoJiiieH8fU8tVFSGKojM7XOgkliyRzBoueWSc22u
        rR9xfIpONaZ9LV1nbaykdKyVrmgPDodwBfc6W16jZBJEWJhNcJ4IahrXNbKxkga8AOAe0OAcATY2Pest
        AREQEREBariSMuglA3yO+wutqsesYCNfEfVBA8NddjD4flupNh7+zZRSgvG+SE7scbeV9D+R9VIMPnQb
        puytvYvI5FWTdBQ0WVQKpK8LkFTisDHcNbVU81K8kNmY5hI3FxoR5Gx9FmWS6DjeD4ZxBh8EuH08EMsT
        i7LMHM7GfRxZmc0+PaabFZdJ7PKimwWspg0SVVSY3FjHCwDJG5WhzrA2GYnz0v16zdUnZBxGv4WxappK
        HDJKWOOOEhxn5jTYEOADmg3BAcb2vc2WUZY5OJ4GxPD2sidE5zCDYtppWuFxsRt5rsNlpcH4OoqaZ9TB
        AGSvzXfmkce0butncQ257gEHKKPgPEaUT0wpXVLHnsyMq3Qxlp7J5kQeC643Hpcrc8Rezqo9xoRTtiE9
        K+SR0Ic4sPNc1xDXSEkkGNu5AN3WXXVg189gTfQIOaf4jiU1Q109LDTxNFnXcHvNgfgc0952OgF91qOF
        sJqY8ZMrYRJFNJfMHtGVubM51jqbW2spfiU9zbqVn+zZnNqJpdxE0MB6ZnXv+R+qDHxngiofiLomNH+H
        VU0VXUXLf1kIdmiy7kSOEbj5ei3EuA1BxmprMn6F+Hmna/M3WUytdlte+wOtrKcIg5Hh3BtY2gwGB0Np
        KWtE87c7OxHz5JL3vY9kjQX3VdXwrU01bXSto5ayKqeZ43Q1r6dzHuuXMlaJGgtudCL2A8bDrKINFwTh
        bqajhgfFFE4ZiY4S8sbmeXZQXkkmx1N9TdRfhXgNnvOJy19JDIJalz4XSNjkJjNzcXuWjUaG2y6KiCE8
        fUFblpGUDHGna8iogp5GwSOjsMojebBrR2rgEHUeYh8fC9TTHF6l9NyoJ8OnteoMz2va06TOebmRwu7S
        7RYC67MrNbSsljkhkbmZI1zHt1F2vBa4XGouCdkHHKSixGtwSlwtlIwRzMh/zfNbkbC14kBLPj5nZAIA
        I7jrpt8Z4RngxCWrjppKuGeKJhbFVPp5I3xMDQdHsDmENHU6k92vSsOoY4Io4Im5Y42tYxtybNaLAXJJ
        OnU6rIQcoxPg2qfhbYGUsUUr61lS6GORz8rLgOdLJK48ySwuSPQLq6Ig5zHh9fh+IYhUwUnvcVby5G5J
        Y2Ojkja4ZX8wi7SXHUE2AHireKcP4k5uHV5igfVUkk0j6aM5GOjm+VjjpzALamwJJ1NtelIg55RYLWVW
        ITYnPB7s1tI6kihdIx73lxc7O8sJa0XcRv3LRu4LrTgNFQ8n9PHUtkfHnZoznSkkm9jo4HQrr6IIFjGB
        znFzXZP0DaCSIvzN/WZnHLlvfY3vayhnCjMQmwGPD6eja9lQ2RrakysDGMfM8v5jD2swOa2UEWsfBduk
        YHAtOoIII8DusXCMLipoWU8DMkUYs1t3GwJJOriSdSdyg59jeBYhE+ip42zVFDFSxwOjp6htO4zRjLnk
        ddri0gN0B79O+Py8BVzcOxajbTNDpp4JYWRzBzS3M1zmtfIQ4loFiXWuQbLtqIITxJgE8mIYLPGy8dKZ
        +aczRlzxsDTYm51aRoohxfgjzjBw+IjkYmYKioZfVopXEyadA8Aa9T5Lsq0WBcH0VHJJPTQBkkgs55dI
        82JuQM7jlF+gsNB3IN41oAAGw0XqIgIiICIiAqJW3CrRBAuL6cxSx1TRp8En/wAk+mnoFXDONCNtwpTi
        lG17XMcLtcCCoDHmp5DTS+bHdC3ogllPUXCyWyKPwT2WzgnBQbAOXqx2vV5pQVgLwtVdlU1qC2GoQr5A
        Vl7kFC9VJeFZnqA0XcbILsjupNlGMcr/AKDp4qrEMVzDezVHa2fN2nGzR+SDW41X8tjnk9p2jR4nc+i6
        L7McKMFCxzvjmPON9LBwGUfwgH1UM4N4b9+qPeZm/wCXiIytPzuHy+Q3P0XXwOiD1ERAREQEREBERARE
        QEREBERAREQEREBERAREQEREBERAREQEREFL230WmxvBWTsyPH7rhuD3grdrwhBzB7paV/JqBodGSjYj
        zWygm2IN1Mq7DmSsMb2hzTuD/LuKgOJ8M1VK4vpbzRHeN2rm+XePLVBvaar6FZ7JAoZSY5GTlf8Ao3jQ
        tdpr6/zW7iqDa4NxvdBvxKvectH77bcql2KN/EEG8dMrD5loJcaFtCFrqjFS7qgkVTirW7aqOV+IlxJJ
        v4LFMzneXevImknKyMyPPcNAgtTS6FzzZo/uwWRgHDklcRJJdlODpbd+uoHh4rfYPwU57hLWG9toht/u
        /oPqpxHGGgNaAANAB3BBbo6VkTGxRtDWtFgB0CvIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICI
        iAiIgIiICIiAiIgIiINNjnDNPVD9KztdHgkOHqPyKiE3AVRCSaapJb+B9x6XFwfoF0hEHNzg9XazmA+T
        hqrLsDqP9M/Uf1XSzGO5U8gIObjAZx/0jf8AeH9Veg4aqXfKyPxJuftddD5IVTWAbBBF8O4RaCDK4v8A
        D4R9NypHS0bIxZjQB4ABX0QEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREH//Z
</value>
  </data>
</root>